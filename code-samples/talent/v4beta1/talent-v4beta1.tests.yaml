# Talent v4beta1
test:

  helpers:

    company_helpers:
      list: &list_companies
        target: talent_list_companies
        params:
          project_id: { variable: project_id }
      create: &create_company
        target: talent_create_company
        params:
          project_id:   { variable: project_id }
          display_name: { variable: company_test_identifier }
          external_id:  { variable: company_test_identifier }
      delete: &delete_company
        target: talent_delete_company
        params:
          project_id: { variable: project_id }
          company_id: { variable: company_id }

    job_helpers:
      list: &list_jobs
        target: talent_list_jobs
        params:
          project_id: { variable: project_id }
          filter:     { variable: company_name_filter }
      create: &create_job
        target: talent_create_job
        params:
          project_id:     { variable: project_id }
          company_name:   { variable: company_name }
          requisition_id: { variable: job_test_identifier }
      delete: &delete_job
        target: talent_delete_job
        params:
          project_id: { variable: project_id }
          job_id:     { variable: job_id }

  suites:

  - name: Managing Companies
    helpers:  
    - assert_contains: &assert_company_present
      - variable: company_test_identifier
    setup:
    - env: { variable: project_id, name: GOOGLE_PROJECT_ID }
    - uuid: company_test_identifier
    teardown:
    - call_may_fail: *delete_company
    cases:
    - name: Create Company
      spec:
      - call: *list_companies
      - assert_not_contains: *assert_company_present
      - call: *create_company
      - extract_matches: "/companies/(?P<company_id>[\\w-]+)"
      - assert_contains:
        - literal: "Created company:"
        - literal: "Company name:"
        - variable: company_test_identifier
      - call: *list_companies
      - assert_contains: *assert_company_present
    - name: List Companies
      spec:
      - call: *create_company
      - extract_matches: "/companies/(?P<company_id>[\\w-]+)"
      - call: *list_companies
      - assert_contains:
        - literal: "Company:"
        - literal: "Display name:"
        - literal: "External ID"
        - variable: company_test_identifier
        - variable: company_id
    - name: Delete Company
      spec:
      - call: *create_company
      - extract_matches: "/companies/(?P<company_id>[\\w-]+)"
      - call: *delete_company
      - assert_contains:
        - literal: "Deleted company"
      - call: *list_companies
      - assert_not_contains: *assert_company_present
    - name: Get Company
      spec:
      - call: *create_company
      - extract_matches: "/companies/(?P<company_id>[\\w-]+)"
      - call:
          target: talent_get_company
          params:
            project_id: { variable: project_id }
            company_id: { variable: company_id }
      - assert_contains:
        - literal: "Company name:"
        - literal: "Display name:"
        - variable: company_test_identifier
        - variable: company_id

  - name: Managing Jobs
    setup:
    - env: { variable: project_id, name: GOOGLE_PROJECT_ID }
    - uuid: company_test_identifier
    - uuid: job_test_identifier
    - call: *create_company
    - extract_matches: "/companies/(?P<company_id>[\\w-]+)"
    - code: company_name = 'projects/{}/companies/{}'.format(project_id, company_id)
    - code: company_name_filter = 'companyName = \\"{}\\"'.format(company_name)
    teardown:
    - call_may_fail: *delete_job
    - call_may_fail: *delete_company
    cases:
    # - name: Create Company
    #   spec:
    # - name: List Companies
    #   spec:
    - name: List Jobs
      spec:
      - call: *create_job
      - extract_matches: "/jobs/(?P<job_id>[\\w-]+)"
      - call: *list_jobs
      - assert_contains:
        - literal: "Job name:"
        - literal: "Job title: Software Engineer"
        - variable: job_id

    # - name: Delete Company
    #   spec:
    # - name: Get Company
    #   spec: