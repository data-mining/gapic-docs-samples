#! /bin/bash

# ⚠️  This makes a LOT of assumptions. It will probably break for you.

# (beccasaurus) Refactor language bits out / etc / make it all pretty! After February.

if [ "$#" -ne 3 ]; then
  echo "Usage: ./script/generate [api_name] [api_version] [language]"
  echo
  echo "e.g. ./script/generate speech v1 python"
  echo
  echo "To run against a local copy of gapic-generator"
  echo "> GAPIC_GENERATOR=/path/to/gapic-generator ./script/generate ..."
  echo
  echo "To use the local, generated library (not published)"
  echo "> LOCAL=true ./script/generate ..."
  exit 1
fi

function error_and_exit() {
	echo "$1" >&2
	exit 1
}

for dependency_bin in docker python ruby; do
	if ! [ -x "$(command -v $dependency_bin)" ]; then
		error_and_exit "$dependency_bin is not installed. Please install before continuing."
	fi
done

if [ -z "$(docker images | grep googleapis/artman)" ]; then
	echo "Pulling required Docker image (googleapis/artman)"
	docker pull googleapis/artman
fi

API_NAME="$1"
API_VERSION="$2"
LANGUAGE="$3"

RELATIVE_SCRIPT_DIR="$( dirname "${BASH_SOURCE[0]}" )"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
CODE_SAMPLES_DIR="$( dirname "$SCRIPT_DIR" )"
GOOGLEAPIS_DIR="$( dirname "$CODE_SAMPLES_DIR" )"
RELATIVE_API_SAMPLES_DIRECTORY="$API_NAME/$API_VERSION/$LANGUAGE"
API_SAMPLES_DIRECTORY="$CODE_SAMPLES_DIR/$RELATIVE_API_SAMPLES_DIRECTORY"
API_VERSION_DIRECTORY="$CODE_SAMPLES_DIR/$API_NAME/$API_VERSION"
CLIENT_LIBRARIES_DIRECTORY="$CODE_SAMPLES_DIR/client-libraries/$LANGUAGE"

case "$LANGUAGE" in
  "python")
    LANGUAGE_EXTENSION=py
    ;;
  "php")
    LANGUAGE_EXTENSION=php
    ;;
  "nodejs")
    LANGUAGE_EXTENSION=js
    ;;
  "go")
		$SCRIPT_DIR/generate-go $API_NAME $API_VERSION
		exit $?
    ;;
  "java")
    LANGUAGE_EXTENSION=java
    ;;
esac

## Lookup artman configuration file (used for generation) in googleapis dir
# RELATIVE_ARTMAN_FILE="/googleapis/google/$API_NAME/artman_${API_NAME}_${API_VERSION}.yaml"
ARTMAN_FILE="$(find "$GOOGLEAPIS_DIR" -type f -name "artman_${API_NAME}_${API_VERSION}.yaml")"

if [ -z "$ARTMAN_FILE" ]; then
  echo "Artman file not found: $API_VERSION/artman_${API_NAME}_${API_VERSION}.yaml"
  exit 1
else
  RELATIVE_ARTMAN_FILE="$( echo "$ARTMAN_FILE" | sed "s|$GOOGLEAPIS_DIR/||" )"
fi

## Run generator via artman docker image
ARTMAN_COMMAND="artman --local --config \"$RELATIVE_ARTMAN_FILE\" --generator-args=\"--dev_samples\" generate ${LANGUAGE}_gapic"

OUTPUT_DIR="$CODE_SAMPLES_DIR/.generator-output/$LANGUAGE-$API_NAME-$API_VERSION-$(date +"%H-%M%p-%Y-%m-%d")"
mkdir -p "$OUTPUT_DIR"

log_step() {
  echo -e "[\033[0;92m $1 \033[0m]"
}

########################################
log_step "Sample Generator Info"
########################################
echo "API: $API_NAME $API_VERSION"
echo "Language: $LANGUAGE .$LANGUAGE_EXTENSION"
echo "Sample Output: $RELATIVE_API_SAMPLES_DIRECTORY"

echo
########################################
log_step "Running Sample Generator"
########################################

set -ex

if [ -n "$GAPIC_GENERATOR" ]; then
  local_gapic_generator_volume="--volume $GAPIC_GENERATOR:/toolkit"
fi

docker run --rm                                        \
  --env     RUNNING_IN_ARTMAN_DOCKER=True              \
  --workdir /googleapis                                \
  --volume "$GOOGLEAPIS_DIR:/googleapis"               \
  --volume "$OUTPUT_DIR:/googleapis/artman-genfiles" $local_gapic_generator_volume \
  googleapis/artman                                    \
  /bin/bash -c "$ARTMAN_COMMAND"

set +ex

echo
echo "GAPIC output saved to: $OUTPUT_DIR"

if [ "$LOCAL" = "true" ]; then
  echo
  ########################################
  log_step "Saving Library into $CLIENT_LIBRARIES_DIRECTORY"
  ########################################

  # .generated-output directory
  library_directory="$(ls -d $OUTPUT_DIR/*/*)"
  # folder name
  LIBRARY_DIR_NAME="$( basename "$library_directory" )"

  echo "Generated Library Directory: $library_directory"

  if [ -d "$library_directory" ]; then
    mkdir -p "$CLIENT_LIBRARIES_DIRECTORY"
    cp -r "$library_directory" "$CLIENT_LIBRARIES_DIRECTORY/"
  fi
fi

mkdir -pv "$API_SAMPLES_DIRECTORY"

SAMPLES_DIRECTORY="$(find "$OUTPUT_DIR" -type d -name samples)"
if [ ! -d "$SAMPLES_DIRECTORY" ]; then
  echo "No samples directory found"
  echo
  echo "Generated output: $OUTPUT_DIR"
  exit 1
fi

echo
########################################
log_step "Saving Sample files to $SAMPLES_DIRECTORY"
########################################

for sample_file in `find "$SAMPLES_DIRECTORY" -type f \( -name "*.php" -or -name "*.py" -or -name "*.js" -or -name "*.java" \)`; do
  relative_to_samples="$( echo "$sample_file" | sed "s|$SAMPLES_DIRECTORY/||" )"
  echo " - $relative_to_samples"

  if [ "$LANGUAGE" == "php" ]; then
    # pending package file updates for PHP
    cat "$sample_file" | sed "s|require __DIR__.*|require __DIR__ . '/vendor/autoload.php';|" > "$API_SAMPLES_DIRECTORY/$(basename $sample_file)"

  elif [ "$LANGUAGE" == "nodejs" ]; then
    # pending upcoming fix
    cat "$sample_file" | sed 's/^argv =/const argv =/g' | sed 's/{\$/${/g' > "$API_SAMPLES_DIRECTORY/$(basename $sample_file)"

  elif [ "$LANGUAGE" = "java" ]; then
    # pending upcoming fix
    target_path="$API_SAMPLES_DIRECTORY/$relative_to_samples"
    mkdir -p "$( dirname "$target_path" )"
    cat "$sample_file" | sed 's/main(String\[\] args)/main(String[] args) throws Exception/g' > "$target_path"

  else
    cp -v "$sample_file" "$API_SAMPLES_DIRECTORY/"
  fi
done

if [ "$LANGUAGE" = "java" ]; then
  $SCRIPT_DIR/generate-pom "$API_NAME" "$API_VERSION" "$API_SAMPLES_DIRECTORY" > "$API_SAMPLES_DIRECTORY/pom.xml"
  echo "Saved Java Maven $API_SAMPLES_DIRECTORY/pom.xml"
fi

for paged_all_sample in `find "$API_SAMPLES_DIRECTORY" -type f \( -name "*PagedAll*.$LANGUAGE_EXTENSION" -or -name "*paged_all*.$LANGUAGE_EXTENSION" \)`; do
  paged_sample="$(echo "$paged_all_sample" | sed 's/PagedAll/Paged/' | sed 's/paged_all/paged/')"
  if [ -f "$paged_sample" ]; then
    echo "Removing unwanted calling form: $paged_sample"
    rm -v $paged_sample
  fi
done

for lro_async_unwanted_sample in `find "$API_SAMPLES_DIRECTORY" -type f -name "*LongRunningRequestAsync*.$LANGUAGE_EXTENSION"`; do
  lro_async_ok_sample="$(echo "$lro_async_unwanted_sample" | sed 's/LongRunningRecognizeLongRunningRequestAsync/LongRunningRecognizeLongRunningRequest/' )"
  if [ -f "$lro_async_ok_sample" ]; then
    echo "Removing unwanted calling form: $lro_async_unwanted_sample"
    rm $lro_async_unwanted_sample
  fi
done

echo "Removing unwanted calling forms, if any"
for request_calling_form in `find "$API_SAMPLES_DIRECTORY" -type f -name "*Request*.$LANGUAGE_EXTENSION"`; do
  sample_prefix="$( echo "$request_calling_form" | sed 's/^\(.*\)Request.*/\1/' | xargs basename )"
  find "$API_VERSION_DIRECTORY" -type f -name "${sample_prefix}CallableCallable*.$LANGUAGE_EXTENSION" -exec rm -v {} \;
  find "$API_VERSION_DIRECTORY" -type f -name "${sample_prefix}Flattened*.$LANGUAGE_EXTENSION" -exec rm -v {} \;
done

echo
########################################
log_step "Saving Manifest File to $API_VERSION_DIRECTORY/$API_NAME.manifest.yaml"
########################################

manifest_content="$( $RELATIVE_SCRIPT_DIR/generate-manifest $API_NAME/$API_VERSION )"
if [ $? -ne 0 ]; then
  echo -e "$manifest_content"
  echo "ERROR: Duplicate region tags generated"
  exit 1
else
  echo -e "$manifest_content" > "$API_VERSION_DIRECTORY/$API_NAME.manifest.yaml"
fi

echo "Wrote sample manifest: $API_NAME/$API_VERSION/$API_NAME.manifest.yaml"

TEST_FILES="$( ls $API_VERSION_DIRECTORY/*test*.yaml )"

if [ -z "$TEST_FILES" ]; then
  cat > "$API_VERSION_DIRECTORY/$API_NAME.tests.yaml" <<EOL
test:
  suites:
  - name: "$API_NAME $API_VERSION Sample Tests"

    setup:
    - log:
      - "Setup code goes here"
    - log:
      - "This runs before every test case"

    teardown:
    - log:
      - "Teardown code goes here"
    - log:
      - "This runs after every test case, even if the test fails"

    cases:
    - name: "Do a thing"
      spec:
      - log:
        - "This test stub was autogenerated"
      - log:
        - "For more information, see the Testing Guide here:"
      - log:
        - "https://github.com/beccasaurus/gapic-docs-samples/blob/master/code-samples/TESTING_GUIDE.md"

      # Generate a unique string
      # - uuid: my_unique_string

      # Call a sample by region tag ID
      # - call:
      #     target: create_dog
      #     params:
      #       breed:
      #         literal: "Golden Retriever"
      #       dog_name:
      #         variable: my_unique_string
      #     args:
      #     - Arg1
      #     - Arg2
      #
      # This test will invoke the executable for 'create_dog'
      # passing along the following arguments:
      # $ [bin] [code file] Arg1 Arg2 --breed="Golden Retriever" --dog_name="[UUID]"

      # Assert value present in output of executed samples
      # - assert_contains:
      #   - literal: "The output should include this!"
      #   - variable: my_unique_string
EOL
  echo "Wrote stub test template: $API_NAME/$API_VERSION/${API_NAME}.tests.yaml"
fi

echo
########################################
log_step "Installing Dependencies"
########################################

CURRENT_DIR="`pwd`"
cd "$API_SAMPLES_DIRECTORY"
case "$LANGUAGE" in
  "python")
    if [ -f "requirements.txt" ]; then
      pip install -r requirements.txt
    else
      echo "Missing requirements.txt in $RELATIVE_API_SAMPLES_DIRECTORY"
      if which "pip"; then
        if [ "$LOCAL" = "true" ] ; then
          echo "Local library dependency: client-libraries/$LANGUAGE/$LIBRARY_DIR_NAME"
          pip install ../../../client-libraries/$LANGUAGE/$LIBRARY_DIR_NAME
        else
          # Guess PyPy package name and try installing it
          pip_package_name="google-cloud-$API_NAME"
          pip_results="$(pip search $pip_package_name | grep "^$pip_package_name ")"
          if [ -z "$pip_results" ]; then
            echo "no pip package found: $pip_package_name"
            echo "please create requirements.txt by hand"
          else
            pip_package_version="$(echo "$pip_results" | awk '{print $2}' | sed 's/[\(\)]//g')"
            echo "Found pip package $pip_package_name ($pip_package_version)"
            echo "$pip_package_name==$pip_package_version" > requirements.txt
            echo "Saved requirements.txt"
            pip install -r requirements.txt
          fi
        fi
      else
        echo "pip not installed, can not search for pip package for $API_NAME"
        echo "please create requirements.txt by hand"
      fi
    fi
    ;;
  "php")
    if [ -f "composer.json" ]; then
      composer install
    else
      echo "Missing composer.json in $RELATIVE_API_SAMPLES_DIRECTORY"
      echo "Saving composer.json (guessing google/cloud-$API_NAME > 0.0.1)"
      cat > composer.json <<EOL
{
    "require": {
        "google/cloud-$API_NAME": ">0.0.1"
    }
}
EOL
      composer install
    fi
    ;;
  "nodejs")
    if [ -f "package.json" ]; then
      npm install
    else
      echo "Missing package.json in $RELATIVE_API_SAMPLES_DIRECTORY"
      echo "Saving package.json (guessing @google-cloud/$API_NAME)"
      if [ "$LOCAL" = "true" ] ; then
        echo "Local library dependency: client-libraries/$LANGUAGE/$LIBRARY_DIR_NAME"
        cat > package.json <<EOL
{
    "dependencies": {
        "@google-cloud/$API_NAME": "file:../../../client-libraries/$LANGUAGE/$LIBRARY_DIR_NAME",
        "yargs": "*"
    }
}
EOL
      else
        cat > package.json <<EOL
{
    "dependencies": {
        "@google-cloud/$API_NAME": "*"
    }
}
EOL
      fi
      npm install
    fi
    ;;
  "java")
    mvn clean package
    ;;
  *)
    echo "Unsure how to install dependencies for $LANGUAGE"
    ;;
esac
cd "$CURRENT_DIR"

echo
echo "[$RELATIVE_API_SAMPLES_DIRECTORY]"
ls -a "$API_SAMPLES_DIRECTORY" | cat | tail -2
echo
echo "Sample files saved to: $RELATIVE_API_SAMPLES_DIRECTORY"
for sample_file in `ls $API_SAMPLES_DIRECTORY/*.$LANGUAGE_EXTENSION | xargs -n1 basename`; do
  printf -- "- " && echo -e "\033[0;96m$RELATIVE_API_SAMPLES_DIRECTORY/$sample_file\033[0m"
done

echo
########################################
echo "To run a sample:"
########################################

case "$LANGUAGE" in
  "python")
    EXAMPLE_SAMPLE_FILE="$(find "$API_SAMPLES_DIRECTORY" -type f -name "*.py" | head -1 | xargs basename)"
    EXAMPLE_SAMPLE_PARAMETERS="$( grep 'parser.add_argument(' -A1 "$API_SAMPLES_DIRECTORY/$EXAMPLE_SAMPLE_FILE" | grep -v 'parser.add_argument(' | sed "s/.*'--\([a-z_]*\).*/\1/" | grep -v -- -- )"

    echo -e "\033[0;96m>> python $RELATIVE_API_SAMPLES_DIRECTORY/$EXAMPLE_SAMPLE_FILE --input_param=\"value\"\033[0m"
    if [ -n "$EXAMPLE_SAMPLE_PARAMETERS" ]; then
      echo
      echo "This sample accepts the following parameters:"
      echo -e "$EXAMPLE_SAMPLE_PARAMETERS"
    fi
    ;;
  "php")
    EXAMPLE_SAMPLE_FILE="$(find "$API_SAMPLES_DIRECTORY" -type f -name "*.php" | head -1 | xargs basename)"
    EXAMPLE_SAMPLE_PARAMETERS="$( grep '= $options\[' "$API_SAMPLES_DIRECTORY/$EXAMPLE_SAMPLE_FILE" | awk '{print $1}' | sed 's/\$//' )"
    echo -e "\033[0;96m>> php $RELATIVE_API_SAMPLES_DIRECTORY/$EXAMPLE_SAMPLE_FILE --input_param=\"value\"\033[0m"
    if [ -n "$EXAMPLE_SAMPLE_PARAMETERS" ]; then
      echo
      echo "This sample accepts the following parameters:"
      echo -e "$EXAMPLE_SAMPLE_PARAMETERS"
    fi
    ;;
  "nodejs")
    EXAMPLE_SAMPLE_FILE="$(find "$API_SAMPLES_DIRECTORY" -type f -name "*.js" | head -1 | xargs basename)"
		EXAMPLE_SAMPLE_PARAMETERS="$( grep "^  .default('" "$API_SAMPLES_DIRECTORY/$EXAMPLE_SAMPLE_FILE" | sed "s/  .default('\([^']*\).*/\1/" )"
    echo -e "\033[0;96m>> node $RELATIVE_API_SAMPLES_DIRECTORY/$EXAMPLE_SAMPLE_FILE --input_param=\"value\"\033[0m"
    if [ -n "$EXAMPLE_SAMPLE_PARAMETERS" ]; then
      echo
      echo "This sample accepts the following parameters:"
      echo -e "$EXAMPLE_SAMPLE_PARAMETERS"
    fi
    ;;
  "java")
    echo "Example of how to run sample from $API_NAME/$API_VERSION/$LANGUAGE directory:"
    echo "$ mvn exec:java -DAnalyzeEntitiesRequestLanguageEntitiesGcs"
    ;;
  *)
    echo "Unsure how to run samples for $LANGUAGE"
    ;;
esac
