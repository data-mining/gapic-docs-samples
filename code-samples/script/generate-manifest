#! /usr/bin/env ruby

unless ARGV.length == 1
  puts "Usage: ./script/generate-test-manifest [sample directory]"
  puts
  puts "e.g. ./script/generate-test-manifest speech/"
  puts "e.g. ./script/generate-test-manifest speech/v1/"
  exit
end

require "yaml"

excluded_paths = %w[ /env/ /node_modules/ /vendor/ ]

directory = ARGV.shift

# chdir_exec = File.join File.dirname(__FILE__), "chdir-exec"
# java_bin = %{#{chdir_exec} #{File.join directory, "java"} mvn exec:java -q}

java_exec = File.join File.dirname(__FILE__), "java-exec"
java_bin  = "#{java_exec} #{File.join directory, "java"} "

languages = [
  { name: "php",    extension: "php",  bin: "php",    samples: [], path: File.join(directory, "/") },
  { name: "python", extension: "py",   bin: "python", samples: [], path: File.join(directory, "/") },
  { name: "go",     extension: "go",   bin: "go run", samples: [], path: File.join(directory, "/") },
  { name: "nodejs", extension: "js",   bin: "node",   samples: [], path: File.join(directory, "/") },
  { name: "java",   extension: "java", bin: java_bin, samples: [] }
]

Dir.chdir(directory) do
  languages.each do |language|
    sample_files = Dir.glob("**/*.#{language[:extension]}")
    sample_files.reject! { |file| excluded_paths.any? {|path| file.include? path }}
    sample_files.each do |sample_file|
      target = File.read(sample_file).scan(/\[START ([^\]]+)\]/).flatten.first
      path   = sample_file
      path   = "-D#{ File.basename path, ".java" }" if language[:name] == "java"
      # language[:samples] << { "target" => target, "path" => path }
      language[:samples] << { "region_tag" => target, "path" => path }
    end
  end
end

manifest = {
  "version" => 1,
  "sets" => []
}

languages.each do |language|
  set = { "language" => language[:name] }
  set["bin"]       = language[:bin] if language[:bin]
  set["path"]      = language[:path] if language[:path]
  set["__items__"] = language[:samples]
  manifest["sets"] << set
end

# Check for duplicates (per language)
languages.each do |language|
  samples = manifest["sets"].find { |set| set["language"] == language[:name] }["__items__"]
  duplicates = false
  samples.each do |sample|
    #target  = sample["target"]
    target  = sample["region_tag"]
    #targets = samples.find_all { |s| s["target"] == target }
    targets = samples.find_all { |s| s["region_tag"] == target }
    if targets.length > 1
      STDERR.puts %{# Warning: duplicate region tag [#{target}] (#{language[:name]}) (#{targets.length})
  => #{ targets.map { |t| t["path"] }.join ", " }

}
      duplicates = true
    end
  end
  exit 1 if duplicates
end

puts manifest.to_yaml
exit 0
