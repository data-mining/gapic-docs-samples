// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"log"

	language "cloud.google.com/go/language/apiv1"
	languagepb "google.golang.org/genproto/googleapis/cloud/language/v1"
)

// [START language_entity_sentiment_text]

func sampleAnalyzeEntitySentiment(textContent string) error {
	ctx := context.Background()
	c, err := language.NewClient(ctx)
	if err != nil {
		return err
	}

	// textContent := "Grapes are good. Bananas are bad."
	req := &languagepb.AnalyzeEntitySentimentRequest{
		Document: &languagepb.Document{
			Type: languagepb.Document_PLAIN_TEXT,
			Source: &languagepb.Document_Content{
				Content: textContent,
			},
		},
	}
	resp, err := c.AnalyzeEntitySentiment(ctx, req)
	if err != nil {
		return err
	}

	for _, entity := range resp.GetEntities() {
		fmt.Printf("Entity name: %v\n", entity.GetName())
		fmt.Printf("Entity sentiment score: %v\n", entity.GetSentiment().GetScore())
		for _, mention := range entity.GetMentions() {
			fmt.Printf("Mention: %v\n", mention.GetText().GetContent())
			fmt.Printf("Mention type: %v\n", mention.GetType())
			fmt.Printf("Mention sentiment score: %v\n", mention.GetSentiment().GetScore())
			fmt.Printf("Mention sentiment magnitude: %v\n", mention.GetSentiment().GetMagnitude())
		}
	}
	return nil
}

// [END language_entity_sentiment_text]

func main() {
	textContent := flag.String("text_content", "Grapes are good. Bananas are bad.", "")
	flag.Parse()
	if err := sampleAnalyzeEntitySentiment(*textContent); err != nil {
		log.Fatal(err)
	}
}
