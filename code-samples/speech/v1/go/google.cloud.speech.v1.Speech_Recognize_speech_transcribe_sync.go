// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package main
import(
 "context"
 "flag"
 "fmt"
 "log"

speech "cloud.google.com/go/speech/apiv1"
speechpb "google.golang.org/genproto/googleapis/cloud/speech/v1"
)
// [START speech_transcribe_sync]

func sampleRecognize(languageCode string, localFilePath []byte) error {
	ctx := context.Background()
	c, err := speech.NewClient(ctx)
	if err != nil {
		return err
	}

	// languageCode := "en-US"
	// localFilePath := "Path to local audio file, e.g. /path/audio.wav"
	req := &speechpb.RecognizeRequest{
		Audio: &speechpb.RecognitionAudio{
			AudioSource: &speechpb.RecognitionAudio_Content{
				Content: localFilePath,
			},
		},
		Config: &speechpb.RecognitionConfig{
			SampleRateHertz: 16000,
			LanguageCode: languageCode,
			Encoding: speechpb.RecognitionConfig_LINEAR16,
		},
	}
	resp, err := c.Recognize(ctx, req)
	if err != nil {
		return err
	}

	for _, result := range resp.GetResults() {
		fmt.Printf("Transcript: %v\n", result.GetAlternatives().Get0().GetTranscript())
	}
	return nil
}

// [END speech_transcribe_sync]

func main() {
	languageCode := flag.String("languageCode", "en-US", "")
	localFilePath := flag.[]byte("localFilePath", "Path to local audio file, e.g. /path/audio.wav", "")
	flag.Parse()
	if err := sampleRecognize(*languageCode, *localFilePath); err != nil {
		log.Fatal(err)
	}
}

